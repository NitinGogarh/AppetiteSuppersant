<%- include("./partials/header") -%>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>food-on-map</title>

    <!-- Load Leaflet from CDN -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css" crossorigin="" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.78.0/dist/L.Control.Locate.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin="" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    
    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js" crossorigin=""></script>

    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@^3.0.8/dist/esri-leaflet.js"></script>
    <script src="https://unpkg.com/esri-leaflet-vector@4.0.0/dist/esri-leaflet-vector.js"></script>

    <!-- Load Esri Leaflet Geocoder from CDN -->
    <script src="https://unpkg.com/esri-leaflet-geocoder@^3.1.3/dist/esri-leaflet-geocoder.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.78.0/dist/L.Control.Locate.min.js" charset="utf-8"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <style>
      body {
        margin: 0;
        padding: 0;
        background-color: black;
      }
      #map {
        position: absolute;
       
        font-family: Arial, Helvetica, sans-serif;
        font-size: 14px;
        color: #323232;
   width: 100%;
        height: 86%;
      }
      .heading{
font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
color: rgb(233, 230, 236);
text-align: center;
font-size:80px;
background-color: black;
      }
    </style>
  </head>

  <body>
    
   <!-- <h1 class="heading">Near by hotels/food and coffee shop</h1> -->

    <div id="map"></div>

    <script>

      const apiKey = "AAPK70482ab4ba764465909b35af9e8f3185OuPtotw59Y3rn4VMjprlOizBVk1DcgB0zD3rujJxt_0SWi0sJ00WDdQK_GoIRzRr";

      

      const map = L.map("map", {
        minZoom: 10
      })

      map.setView([27.2046,77.4977], 14); 
      googleStreets = L.tileLayer('http://{s}.google.com/vt?lyrs=m&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3']
});

googleHybrid = L.tileLayer('http://{s}.google.com/vt?lyrs=s,h&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3']
}).addTo(map);

googleSat = L.tileLayer('http://{s}.google.com/vt?lyrs=s&x={x}&y={y}&z={z}',{

    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3']
});
//layer controller
var baseMaps = {
    "StreetMap": googleStreets,
    "Hybrid map": googleHybrid,
    "sattelite":googleSat
};
var layerControl = L.control.layers(baseMaps).addTo(map);


    L.Control.geocoder({flyTo:true}).addTo(map);
   
// request location update and set location
var lc = L.control.locate().addTo(map);

// request location update and set location
lc.start();


      L.esri.Vector.vectorBasemapLayer(layerControl, {
        apiKey: apiKey
      }).addTo(map);

      L.Control.PlacesSelect = L.Control.extend({
        onAdd: function (map) {

          const placeCategories = [
            ["", "Choose a category..."],
            ["Coffee shop", "Coffee shop"],
            ["Food", "Food"],
            ["Hotel", "Hotel"],
            
          ];

          const select = L.DomUtil.create("select", "");
          select.setAttribute("id", "optionsSelect");
          select.setAttribute("style", "font-size: 16px;padding:4px 8px;");

          placeCategories.forEach((category) => {
            let option = L.DomUtil.create("option");
            option.value = category[0];
            option.innerHTML = category[1];
            select.appendChild(option);
          });

          return select;
        },

        onRemove: function (map) {
          // Nothing to do here
        }
      });

      L.control.placesSelect = function (opts) {
        return new L.Control.PlacesSelect(opts);
      };

      L.control.placesSelect({
          position: "topright"
        }).addTo(map);

      const layerGroup = L.layerGroup().addTo(map);

      function showPlaces(category) {

        L.esri.Geocoding
          .geocode({
            apikey: apiKey
          })
          .category(category)
          .nearby(map.getCenter(), 10)

          .run(function (error, response) {
            if (error) {
              return;
            }

            layerGroup.clearLayers();

            response.results.forEach((searchResult) => {
              L.marker(searchResult.latlng)
                .addTo(layerGroup)
                .bindPopup(`<b>${searchResult.properties.PlaceName}</b></br>${searchResult.properties.Place_addr}`);
            });

          });

      }

      const select = document.getElementById("optionsSelect");
      select.addEventListener("change", () => {
        if (select.value !== "") {
          showPlaces(select.value);
        }
      });
 //layer control

 
    </script>
  </body>
</html>

